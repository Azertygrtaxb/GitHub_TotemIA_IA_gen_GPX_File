

DÃ©velopper une solution IA **autonome et ultra-personnalisÃ©e** qui :

1. **ReÃ§oit et analyse les prÃ©fÃ©rences utilisateur** fournies via des inputs.
2. Utilise l'API **OpenRouteService (ORS)** pour **gÃ©nÃ©rer dynamiquement un parcours GPX** unique en Bretagne, en fonction des donnÃ©es utilisateur.
3. GÃ©nÃ¨re un **message personnalisÃ©** avec l'API **OpenAI**, reflÃ©tant le niveau et les prÃ©fÃ©rences du client.
4. Envoie automatiquement le **fichier GPX par email** en utilisant l'API **Gmail**, avec un message engageant et valorisant.
5. Assure la **sÃ©curitÃ©, la cohÃ©rence et la fluiditÃ© du processus**.

---

## ğŸš€ **Instructions PrÃ©cises pour l'IA**

---

### **1. Collecte et VÃ©rification des DonnÃ©es Utilisateur**

L'IA doit **recevoir les donnÃ©es utilisateur** suivantes et les vÃ©rifier :

- **Localisation** : Nom de la ville **uniquement en Bretagne** (ex : PlÃ©rin, Saint-Malo, Brest).
    
    - **Action** : VÃ©rifier systÃ©matiquement que la ville est situÃ©e en Bretagne.
    - Si la ville n'est pas en Bretagne, renvoyer une erreur explicite.
    - Utiliser un service de **gÃ©ocodage** (comme OSM Nominatim) pour obtenir les **coordonnÃ©es GPS** prÃ©cises.
- **Type d'ActivitÃ©** : Trail Running, RandonnÃ©e, Marche.
    
    - **Action** : Utiliser cette information pour dÃ©finir le **profil ORS** (`foot-hiking` pour randonnÃ©e/trail, `foot-walking` pour marche).
- **Niveau d'ExpÃ©rience** : DÃ©butant, IntermÃ©diaire, Expert.
    
    - **Action** : Utiliser cette donnÃ©e pour ajuster le **niveau de difficultÃ©** du parcours (distance, dÃ©nivelÃ©, technicitÃ©).
- **Distance SouhaitÃ©e** : En kilomÃ¨tres.
    
    - **Action** : VÃ©rifier que la distance est **cohÃ©rente** avec le niveau d'expÃ©rience.
    - Convertir la distance en **mÃ¨tres** pour l'API ORS.
- **Type de Paysage** : ForÃªt, Montagne, CÃ´tier.
    
    - **Action** : Utiliser cette prÃ©fÃ©rence pour orienter la sÃ©lection du parcours si possible.
- **Type de Parcours** : Boucle ou Aller-retour.
    
    - **Action** : Utiliser le paramÃ¨tre `round_trip` dans l'API ORS.
- **PrÃ©fÃ©rence de DÃ©nivelÃ©** : Plat, ModÃ©rÃ©, Difficile.
    
    - **Action** : Si les donnÃ©es sont disponibles, ajuster le parcours en fonction du dÃ©nivelÃ©.
- **Temps EstimÃ© de Sortie** : 1h, 2h, 3h+.
    
    - **Action** : VÃ©rifier que la durÃ©e est cohÃ©rente avec la distance et la difficultÃ©.
- **Type de Sol PrÃ©fÃ©rÃ©** : Sentiers en terre, chemins de graviers, sentiers techniques.
    
    - **Action** : Filtrer les parcours si les donnÃ©es de type de sol sont disponibles.
- **Points d'IntÃ©rÃªt SouhaitÃ©s** : Vue panoramique, riviÃ¨re, monument, non nÃ©cessaire.
    
    - **Action** : Inclure ces Ã©lÃ©ments dans le parcours si l'API le permet.
- **Adresse Email** : Adresse de l'utilisateur pour l'envoi.
    

---

### **2. GÃ©nÃ©ration du Parcours GPX avec OpenRouteService (ORS)**

L'IA doit construire une **requÃªte API optimisÃ©e** vers ORS, en utilisant les donnÃ©es utilisateur.

#### **ParamÃ¨tres de la RequÃªte API :**

- `coordinates` : CoordonnÃ©es GPS de la localisation validÃ©e.
- `profile` : SÃ©lectionner dynamiquement entre `foot-walking` ou `foot-hiking` en fonction du type d'activitÃ©.
- `round_trip` : Activer cette option si l'utilisateur a choisi un parcours en boucle.
- `length` : Distance en mÃ¨tres.
- `elevation` : Activer pour inclure les donnÃ©es d'altitude.
- `points` : DÃ©finir le nombre de points pour varier la forme du parcours.
- `avoid_polygons` : Exclure certaines zones si nÃ©cessaire (ex : routes principales, chemins non souhaitÃ©s).

---

### **3. Conversion en Fichier GPX**

- Convertir les donnÃ©es GeoJSON obtenues en un **fichier GPX** standardisÃ©.
- Le fichier GPX doit inclure :
    - Le **tracÃ© complet** du parcours avec les coordonnÃ©es GPS.
    - Les **donnÃ©es d'altitude** si disponibles.
    - Des **mÃ©tadonnÃ©es** : nom du parcours, distance, difficultÃ©.
- Sauvegarder temporairement le fichier GPX jusqu'Ã  l'envoi par email.

---

### **4. GÃ©nÃ©ration du Message PersonnalisÃ© avec l'API OpenAI**

- Utiliser l'API OpenAI pour **gÃ©nÃ©rer un message personnalisÃ©** basÃ© sur les donnÃ©es suivantes :
    - Le niveau de l'utilisateur (DÃ©butant, IntermÃ©diaire, Expert).
    - La localisation et le type de paysage.
    - La difficultÃ© et la distance du parcours.
    - Le type de parcours (boucle ou aller-retour).

#### **Le message doit :**

- ÃŠtre engageant, chaleureux, et professionnel.
- ReflÃ©ter l'image de marque innovante et experte du magasin.
- Mettre en avant les points forts du parcours et encourager l'utilisateur.
- Exemple de ton :

> "Bonjour [PrÃ©nom],
> 
> Voici votre parcours personnalisÃ© de [distance] km, le long des magnifiques cÃ´tes de [localisation]. Ce tracÃ©, adaptÃ© Ã  votre niveau [dÃ©butant/intermÃ©diaire/expert], vous promet une aventure unique. Profitez du paysage, laissez-vous guider par les sentiers et vivez pleinement cette expÃ©rience en Bretagne.
> 
> Votre parcours est prÃªt en piÃ¨ce jointe au format GPX.
> 
> Bonne aventure, et au plaisir de vous retrouver chez Sport Outdoor !"

---

### **5. Envoi Automatique de l'Email avec Gmail API**

- Utiliser l'**API Gmail** pour automatiser l'envoi de l'email contenant :
    - **Objet** : `"Votre parcours personnalisÃ© en Bretagne â€“ Sport Outdoor"`.
    - **Corps** : Le message personnalisÃ© gÃ©nÃ©rÃ© par OpenAI.
    - **PiÃ¨ce jointe** : Le fichier GPX gÃ©nÃ©rÃ©.

---

### **6. SÃ©curitÃ© et Bonnes Pratiques**

- Stocker toutes les **clÃ©s API** (OpenAI, ORS, Gmail) dans les **secrets de Replit**.
- VÃ©rifier que l'email a Ã©tÃ© **envoyÃ© avec succÃ¨s** avant de supprimer le fichier GPX temporaire.
- GÃ©rer les erreurs de maniÃ¨re robuste :
    - Si le parcours ne peut pas Ãªtre gÃ©nÃ©rÃ©, envoyer un message d'erreur clair.
    - Si l'email Ã©choue, consigner l'erreur et rÃ©essayer.

---

### âœ… **RÃ©sultat Attendu**

- Chaque utilisateur reÃ§oit un **email professionnel et personnalisÃ©** avec :
    - Un **fichier GPX unique**, gÃ©nÃ©rÃ© dynamiquement selon ses prÃ©fÃ©rences.
    - Un **message engageant et valorisant**, renforÃ§ant l'image de marque du magasin.

---

### ğŸš¨ **Points de Vigilance**

1. **Validation stricte des donnÃ©es utilisateur** : Toute incohÃ©rence doit Ãªtre dÃ©tectÃ©e et bloquÃ©e.
2. **Personnalisation maximale du parcours** : Chaque itinÃ©raire doit Ãªtre unique et cohÃ©rent.
3. **SÃ©curitÃ© renforcÃ©e** : Les clÃ©s API et les donnÃ©es utilisateur doivent Ãªtre protÃ©gÃ©es.
4. **Optimisation de l'expÃ©rience utilisateur** : Le processus doit Ãªtre rapide, fluide et sans friction.
5. **Gestion robuste des erreurs** : PrÃ©voir des messages clairs et des plans de repli en cas de dysfonctionnement.
